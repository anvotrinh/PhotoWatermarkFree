fastlane_require 'dotenv'

before_all do
  Dotenv.overload '.env.secret'
end

lane :internal do
  versionName, versionCode = increaseVersionCode
  gradle(task: 'clean')
  gradle(task: 'bundle', build_type: 'Release')
  upload_to_play_store(
    track: 'internal',
    skip_upload_apk: true
  )
  notifySlack(versionName, versionCode)
end

lane :release do
  versionName, versionCode = increaseVersionCode
  gradle(task: 'clean')
  gradle(task: 'bundle', build_type: 'Release')
  upload_to_play_store(
    track: 'production',
    skip_upload_apk: true
  )
end

def increaseVersionCode()
  ensure_git_status_clean

  # read file
  path = '../app/build.gradle'
  s = File.read(path)
  # get version name
  re = /versionName\s+"([\d.]+)"/ 
  m = s.match(re)
  versionName = ''
  if m
    versionName = m[1]
  end
  # update version code
  productionCode = google_play_track_version_codes(track: 'production')
  internalCode = google_play_track_version_codes(track: 'internal')
  versionCode = ([productionCode[0], internalCode[0]].max + 1).to_s

  re = /versionCode\s+(\d+)/ 
  s = s.sub(re, "versionCode #{versionCode}")
  # save to file
  f = File.new(path, 'w')
  f.write(s)
  f.close
  # commit
  git_commit(
    path: 'app/build.gradle',
    message: "increase Android version code #{versionCode}"
  )
  push_to_git_remote(remote_branch: 'master')
  return versionName, versionCode
end

def notifySlack(versionName, versionCode)
  message = "New internal version #{versionName} (#{versionCode}) of PhotoWaterMarkFree Android has been deployed successfully."
  slack(
    message: message,
    slack_url: ENV['DEV_CHANNEL_SLACK_URL'],
    success: true,
    default_payloads: []
  )
end