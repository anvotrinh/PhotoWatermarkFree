lane :internal do
  changeEnv('staging')
  increase_version
  gradle(task: 'clean')
  gradle(task: 'bundle', build_type: 'Release')
  upload_to_play_store(
    track: 'internal',
    skip_upload_apk: true
  )
end

lane :increase_version do
  ensure_git_status_clean

  # read file
  path = '../app/build.gradle'
  s = File.read(path)
  # update version code
  re = /versionCode\s+(\d+)/ 
  s = s.sub(re, "versionCode #{getNextVersionCode}")
  # update version name
  re = /versionName\s+"(\d{2}\.\d{2}\.\d{2})(?:\.(\d+))?"/
  versionName = getNextVersionName
  s = s.sub(re, "versionName \"#{versionName}\"")
  # save to file
  f = File.new(path, 'w')
  f.write(s)
  f.close
  # commit
  git_commit(path: 'app/build.gradle', message: "Stg Version Bump #{versionName}")
  push_to_git_remote(remote_branch: 'master')
end

def getLatestVersionName()
  productionName = google_play_track_release_names(track: 'production')[0]
  internalName = google_play_track_release_names(track: 'internal')[0]
  re = /^(\d{2}\.\d{2}\.\d{2})(?:\.(\d+))?$/
  iMatch = internalName.match(re)
  pMatch = productionName.match(re)
  # if version names isn't follow format
  if !pMatch && !iMatch
    return nil
  elsif !iMatch && pMatch != nil
    return productionName
  elsif !pMatch && iMatch != nil
    return internalName
  end
  # if both follow format
  iDate = iMatch[1].gsub('.', '').to_i
  pDate = pMatch[1].gsub('.', '').to_i
  # compare date
  if pDate > iDate
    return productionName
  elsif pDate < iDate
    return internalName
  end
  # if same date
  if pMatch[1].to_i > iMatch[1].to_i
    return productionName
  else
    return internalName
  end
end

def getNextVersionCode()
  productionCode = google_play_track_version_codes(track: 'production')
  internalCode = google_play_track_version_codes(track: 'internal')
  return ([productionCode[0], internalCode[0]].max + 1).to_s
end

def getNextVersionName()
  dateNow = Time.now.strftime("%y.%m.%d")
  latestName = getLatestVersionName
  if !latestName
    return dateNow
  end
  re = /^(\d{2}\.\d{2}\.\d{2})(?:\.(\d+))?$/
  m = latestName.match(re)
  currentDate = m[1]
  currentPatch = m[2]
  nextPatch = ""
  if dateNow != currentDate
    nextPatch = ""
  elsif currentPatch
    nextPatch = "." + (currentPatch.to_i + 1).to_s
  else
    nextPatch = ".2"
  end
  return dateNow + nextPatch
end

$stagingEnv = "API_URL=https://parkings.telesoftmobile.com
SENTRY_DNS=https://babf1d363a27422a9b210e2ac579f7ba@sentry.io/1869369
ENVIRONMENT=staging
ENABLE_REDUX_LOGGER=true"
$productionEnv = "API_URL=https://park.eastonmd.gov
SENTRY_DNS=https://babf1d363a27422a9b210e2ac579f7ba@sentry.io/1869369
ENVIRONMENT=production
ENABLE_REDUX_LOGGER=false"
def changeEnv(env)
  f = File.new('../../.env', 'w')
  content = $stagingEnv
  if env == "production"
    content = $productionEnv
  end
  f.write(content)
  f.close
end
